const { Composer, Scenes: { WizardScene }} = require('telegraf')
const text = require("./const");

const startStep = new Composer()
startStep.on("text", async (ctx) => {
    try {
        if(ctx.message.text === '–û—Ç–º–µ–Ω–∞ üö´') {
            await ctx.replyWithHTML("–ø–æ–∫–∞")
            return ctx.scene.leave()
        } else {
            ctx.wizard.state.data = {}
            await ctx.replyWithHTML("–û—Ç–ø—Ä–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç üëá")
            return ctx.wizard.next()
        }
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É")
        console.error(e)
        return ctx.scene.leave()
    }
})

const addContract = new Composer()
addContract.use(async (ctx) => {
    try {
        if(ctx.update.message.text === '–û—Ç–º–µ–Ω–∞ üö´') {
            await ctx.replyWithHTML("–ø–æ–∫–∞")
            return ctx.scene.leave()
        } else {
            if(ctx.update.message.contact.user_id !== undefined) {
                let user_id = (ctx.update.message.contact.user_id).toString()
                const gsapi = text.gsapi
                const optUpdateOpId = text.optUpdateOpId
                let opId = ((await gsapi.spreadsheets.values.get(optUpdateOpId)).data.values).flat()
                const optUpdate = {
                    spreadsheetId: "1ibaUK-Ebm12RhisI9Ohz-t5BAx8BT7dX1U_TJDTBQB4",
                    range: "salesDepartment!A2:A",
                    valueInputOption: "USER_ENTERED",
                    resource: {values: [[`${user_id}`]]}
                }
                if (opId.find(item => item === user_id)) {
                    await ctx.replyWithHTML("–Æ–∑–µ—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
                } else {
                    gsapi.spreadsheets.values.append(optUpdate)
                    await ctx.replyWithHTML("–¢–µ–ø–µ—Ä—å —é–∑–µ—Ä –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º üëç")
                }
                return ctx.scene.leave()
            } else {
                await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–Ω—Ç–∞–∫—Ç (—Å –ø–æ–º–æ—â—å—é —Å–∫—Ä–µ–ø–∫–∏ —Å–ª–µ–≤–∞ üëá), –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å")
            }
        }
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É")
        console.error(e)
        return ctx.scene.leave()
    }
})

const addOpScene = new WizardScene('addOpWizard', startStep, addContract)
module.exports = addOpScene