const { Composer, Scenes: { WizardScene }, Markup} = require('telegraf')
const text = require('./const')

const startStep = new Composer()
startStep.on("text", async (ctx) => {
    try {
        if(ctx.message.text === '–û—Ç–º–µ–Ω–∞ üö´') {
            await ctx.replyWithHTML("–ø–æ–∫–∞")
            return ctx.scene.leave()
        } else {
            const keyboard = text.keyboard
            ctx.wizard.state.data = {}
            ctx.wizard.state.data.username = ctx.message.from.username
            ctx.wizard.state.data.firstname = ctx.message.from.first_name
            ctx.wizard.state.data.lastname = ctx.message.from.last_name
            await ctx.replyWithHTML("–î–∞—Ç–∞ –æ—Ç", keyboard)
            return ctx.wizard.next()
        }
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})

const beforeDate = new Composer()
beforeDate.on("text", async (ctx) => {
    try {
        if(ctx.message.text === '–û—Ç–º–µ–Ω–∞ üö´') {
            await ctx.replyWithHTML("–ø–æ–∫–∞")
            return ctx.scene.leave()
        } else {
            ctx.wizard.state.data.beforeDate = ctx.message.text
            const dateString = ctx.wizard.state.data.beforeDate
            const date = new Date(dateString.split(".").reverse().join("-"))
            if (isNaN(date.getTime())) {
                await ctx.replyWithHTML("–Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –¥–∞—Ç—É, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
                return ctx.scene.leave()
            } else {
                await ctx.replyWithHTML("–î–∞—Ç–∞ –¥–æ")
                return ctx.wizard.next()
            }
        }
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})

const savetDate = new Composer()
savetDate.on("text", async (ctx) => {
    try {
        if(ctx.message.text === '–û—Ç–º–µ–Ω–∞ üö´') {
            await ctx.replyWithHTML("–ø–æ–∫–∞")
            return ctx.scene.leave()
        } else {
            ctx.wizard.state.data.afterDate = ctx.message.text
            const dateString = ctx.wizard.state.data.afterDate
            const date = new Date(dateString.split(".").reverse().join("-"))
            if (isNaN(date.getTime())) {
                await ctx.replyWithHTML("–Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –¥–∞—Ç—É, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
                return ctx.scene.leave()
            } else {
                const gsapi = text.gsapi
                const optUpdate = {
                    spreadsheetId: "1ibaUK-Ebm12RhisI9Ohz-t5BAx8BT7dX1U_TJDTBQB4",
                    range: "SumAndAverage!A1:B1",
                    valueInputOption: "USER_ENTERED",
                    resource: {
                        values: [
                            [
                                `${ctx.wizard.state.data.beforeDate}`, `${ctx.wizard.state.data.afterDate}`
                            ]
                        ]
                    }
                }
                gsapi.spreadsheets.values.update(optUpdate)
                await ctx.replyWithHTML("–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É –æ—Ç <b>" + ctx.wizard.state.data.beforeDate + "</b> –¥–æ <b>" + ctx.wizard.state.data.afterDate +
                    "</b>", Markup.inlineKeyboard([Markup.button.callback('–ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', 'finalresult')]))
                return ctx.wizard.next()
            }
        }
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})

const finalResult = new Composer()
finalResult.action("finalresult", async (ctx) => {
    try {
        await ctx.answerCbQuery()
        const gsapi = text.gsapi
        const keyboardMenu = text.keyboardMenu
        const optUpdateSum = text.optUpdateSum
        let sumFact = ((await gsapi.spreadsheets.values.get(optUpdateSum)).data.values)
        const optUpdateAccount = text.optUpdateAccount
        const findAccount = ((await gsapi.spreadsheets.values.get(optUpdateAccount)).data.values).flat()

        await ctx.replyWithHTML("–°—É–º–º–∞ –∏–∑ '–û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã': <b>" + sumFact[0]+
                                    "</b>\n–°—Ä–µ–¥–Ω–µ–µ –∏–∑ 'C—Ä–µ–¥–Ω–∏–π —á–µ–∫': <b>" + sumFact[2]+
            "</b>\n–°—É–º–º–∞ –∏–∑ '–°—É–º–º–∞ –≤ –¥–µ–ø–æ–∑–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤': <b>" + sumFact[4]+
            "</b>\n–°—É–º–º–∞ –∏–∑ '–°—É–º–º–∞ —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞': <b>" + sumFact[6]+
            "</b>\n–°—É–º–º–∞ —Ñ–∞–∫—Ç–∞: <b>" + sumFact[8] + "</b>")
        await ctx.replyWithHTML('------------------------------')
        await ctx.replyWithHTML("–î–µ–Ω—å–≥–∏ –≤ '–§–æ—Ä—Ç–µ —Å—á–µ—Ç': <b>" + findAccount[0] +
            "</b>\n–î–µ–Ω—å–≥–∏ –≤ '–ù–∞–ª–∏—á–Ω—ã–µ': <b>" + findAccount[1]+
            "</b>\n–î–µ–Ω—å–≥–∏ –≤ '–ö–∞—Å–ø–∏ –ê–∑–∞—Ç': <b>" + findAccount[2]+
            "</b>\n–î–µ–Ω—å–≥–∏ –≤ '–ö–∞—Å–ø–∏ –ê–ª–¥–∏—è—Ä': <b>" + findAccount[3]+
            "</b>\n–î–µ–Ω—å–≥–∏ –≤ '–î–æ–ª–ª–∞—Ä—ã': <b>" + findAccount[4] + "</b>")
        await ctx.reply('------------------------------',keyboardMenu)
        return ctx.scene.leave()
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})

const resultScene = new WizardScene('resultWizard', startStep, beforeDate, savetDate, finalResult)
module.exports = resultScene
