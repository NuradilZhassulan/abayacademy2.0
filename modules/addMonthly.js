const { Composer, Scenes: { WizardScene }} = require('telegraf')
const moment = require('moment');
const text = require('./const')

let createDate
const startStep = new Composer()
startStep.on("text", async (ctx) => {
    try {
        if(ctx.message.text === '–û—Ç–º–µ–Ω–∞ üö´') {
            await ctx.replyWithHTML("–ø–æ–∫–∞")
            return ctx.scene.leave()
        } else {
            const gsapi = text.gsapi
            const optUpdateOpId = text.optUpdateOpId
            let opId = ((await gsapi.spreadsheets.values.get(optUpdateOpId)).data.values).flat()
            if(opId.find(item => item === (ctx.chat.id).toString())) {
                ctx.wizard.state.data = {}
                createDate = new Date(1970, 0, 1)
                createDate.setSeconds(ctx.message.date)
                createDate = moment(createDate).utc().format('DD.MM.YYYY')
                ctx.wizard.state.data.username = ctx.message.from.username
                ctx.wizard.state.data.firstname = ctx.message.from.first_name
                ctx.wizard.state.data.lastname = ctx.message.from.last_name
                await ctx.replyWithHTML(text.newOrOldStudentText, text.newOrOldStudentKBoard)
                return ctx.wizard.next()
            } else {
                await ctx.reply("–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                return ctx.scene.leave()
            }
        }
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})

let oldStudent
let newStudent
const newOrOldStudentText = new Composer()
newOrOldStudentText.on("text", async (ctx) => {
    try {
        if(ctx.message.text === '–û—Ç–º–µ–Ω–∞ üö´') {
            await ctx.replyWithHTML("–ø–æ–∫–∞")
            return ctx.scene.leave()
        } else {
            await ctx.replyWithHTML("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ üëÜ")
        }
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})
newOrOldStudentText.on('callback_query', async (ctx) => {
    try {
        switch (ctx.update.callback_query.data) {
            case 'new':
                await ctx.answerCbQuery()
                ctx.wizard.state.data.paymentAmountText = "–ù–æ–≤—ã–π"
                oldStudent = false
                newStudent = true
                break
            case 'old':
                await ctx.answerCbQuery()
                ctx.wizard.state.data.paymentAmountText = "–°—Ç–∞—Ä—ã–π"
                oldStudent = true
                newStudent = false
                break
        }
        await ctx.replyWithHTML("–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—è –ò–º—è —É—á–µ–Ω–∏–∫–∞ üë∂")
        return ctx.wizard.next()
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})


let indexNameStud = 0
let studName
let indices = []
//–§–ò–û —É—á–µ–Ω–∏–∫–∞
const studentName = new Composer()
studentName.on("text", async (ctx) => {
    try {
        if(ctx.message.text === '–û—Ç–º–µ–Ω–∞ üö´') {
            await ctx.replyWithHTML("–ø–æ–∫–∞")
            return ctx.scene.leave()
        } else {
            ctx.wizard.state.data.namestud = ctx.message.text
            studName = ctx.wizard.state.data.namestud
            if (oldStudent === true) {
                // const nameStud = studName

                const gsapi = text.gsapi
                const optUpdate = text.optUpdate

                const findNameStud = (await gsapi.spreadsheets.values.get(optUpdate)).data.values;
                const ress = findNameStud.flat()

                // const lowercasednameStud = nameStud.toLowerCase()
                // const lowercased = ress.map(ctx => ctx.toLowerCase())



                let idx = ress.indexOf(studName)
                while (idx !== -1) {
                    indices.push(idx);
                    idx = ress.indexOf(studName, idx + 1);
                }
                indexNameStud = indices[indices.length - 1]


                let findStudName = false
                if (indexNameStud !== undefined) {findStudName = true}

                if (findStudName === true) {
                    await ctx.replyWithHTML("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
                    return ctx.wizard.selectStep(ctx.wizard.cursor + 8)
                } else {
                    await ctx.replyWithHTML("–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Ñ–∞–º–∏–ª–∏—è –∏–º—è —É—á–µ–Ω–∏–∫–∞, –Ω–∞–π–¥–∏—Ç–µ –≤ —á–∞—Ç–µ '–ü—Ä–æ–¥–∞–∂–∏' –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                    return ctx.wizard.selectStep(ctx.wizard.cursor + 7)
                }

            } else {
                await ctx.replyWithHTML("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–†–û/–ö–û)")
                return ctx.wizard.next()
            }
        }
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})

const studentClass = new Composer()
studentClass.on("text", async (ctx) => {
    try {
        if(ctx.message.text === '–û—Ç–º–µ–Ω–∞ üö´') {
            await ctx.replyWithHTML("–ø–æ–∫–∞")
            return ctx.scene.leave()
        } else {
            ctx.wizard.state.data.classstud = ctx.message.text
            await ctx.replyWithHTML("–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—è –ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è üë®‚Äçüë©‚Äçüë¶")
            return ctx.wizard.next()
        }
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})

//–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è
const parentName = new Composer()
parentName.on("text", async (ctx) => {
    try {
        if(ctx.message.text === '–û—Ç–º–µ–Ω–∞ üö´') {
            await ctx.replyWithHTML("–ø–æ–∫–∞")
            return ctx.scene.leave()
        } else {
            ctx.wizard.state.data.parentName = ctx.message.text
            await ctx.replyWithHTML("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É üí∞")
            return ctx.wizard.next()
        }
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})

const paymentAmount = new Composer()
paymentAmount.hears(/^[0-9]+$/, async (ctx) => {
    try {
        ctx.wizard.state.data.paymentAmount = ctx.message.text
        if (45000 <= ctx.wizard.state.data.paymentAmount && ctx.wizard.state.data.paymentAmount <= 59000) {
            await ctx.replyWithHTML(text.paymentReceivedText, text.paymentReceivedKBoard)
            return ctx.wizard.next()
        } else {
            await ctx.replyWithHTML("–í–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–æ–≥–æ–≤–æ—Ä–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –ø–æ—Å–ª–µ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ\n /start")
            return ctx.scene.leave()
        }
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})

const paymentReceived = new Composer()
paymentReceived.on("text", async (ctx) => {
    try {
        if(ctx.message.text === '–û—Ç–º–µ–Ω–∞ üö´') {
            await ctx.replyWithHTML("–ø–æ–∫–∞")
            return ctx.scene.leave()
        } else {
            await ctx.replyWithHTML("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ üëÜ")
        }
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})
paymentReceived.on("callback_query", async (ctx) => {
    try {
        switch (ctx.update.callback_query.data) {
            case 'forte':
                ctx.wizard.state.data.paymentReceived = "–§–æ—Ä—Ç–µ —Å—á–µ—Ç"
                break
            case 'cash':
                ctx.wizard.state.data.paymentReceived = "–ù–∞–ª–∏—á–Ω—ã–µ"
                break
            case 'kaspiAzat':
                ctx.wizard.state.data.paymentReceived = "–ö–∞—Å–ø–∏ –ê–∑–∞—Ç"
                break
            case 'kaspiAldiyar':
                ctx.wizard.state.data.paymentReceived = "–ö–∞—Å–ø–∏ –ê–ª–¥–∏—è—Ä"
                break
            case 'dollars':
                ctx.wizard.state.data.paymentReceived = "–î–æ–ª–ª–∞—Ä—ã"
                break
        }
        await ctx.replyWithHTML('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n <b>DD.MM.YYYY (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)</b>\n <i>31.12.2020</i>')
        return ctx.wizard.next()
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})

const startLearning = new Composer()
startLearning.hears(/^[0-9.]+$/, async (ctx) => {
    try {
        if(ctx.message.text === '–û—Ç–º–µ–Ω–∞ üö´') {
            await ctx.replyWithHTML("–ø–æ–∫–∞")
            return ctx.scene.leave()
        } else {
            ctx.wizard.state.data.startLearning = ctx.message.text
            await ctx.replyWithHTML(text.adressText, text.adressTextKBoard)
            return ctx.wizard.next()
        }
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})

let wizardDate
const conditionStep = new Composer()
conditionStep.on("callback_query", async (ctx) => {
    try {
        switch (ctx.update.callback_query.data) {
            case 'kurmangazy':
                await ctx.answerCbQuery()
                ctx.wizard.state.data.address = "–ö—É—Ä–º–∞–Ω–≥–∞–∑—ã 111"
                break
            case 'zhetisu':
                await ctx.answerCbQuery()
                ctx.wizard.state.data.address = "–ñ–µ—Ç—ã—Å—É 3"
                break
            case 'online':
                await ctx.answerCbQuery()
                ctx.wizard.state.data.address = "–û–Ω–ª–∞–π–Ω"
                break
            case 'turan':
                await ctx.answerCbQuery()
                ctx.wizard.state.data.address = "–¢—É—Ä–∞–Ω 16"
                break
            case 'mangilikel':
                await ctx.answerCbQuery()
                ctx.wizard.state.data.address = "–ú–∞–Ω–≥–∏–ª–∏–∫ –µ–ª 20"
                break
            case 'otyrar':
                await ctx.answerCbQuery()
                ctx.wizard.state.data.address = "–û—Ç—ã—Ä–∞—Ä 4/3"
                break
        }
        wizardDate = ctx.wizard.state.data
        const keyboardMenuForUser = text.keyboardMenuForUser
        const keyboardMenu = text.keyboardMenu

        /* –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã */
        let dueDate = 1
        /* –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã */

        /* –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã */
        let paid = 0
        /* –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã */

        /* –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ */
        let averageCheck
        averageCheck = parseInt(wizardDate.paymentAmount)
        /* –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ */

        /* –°—É–º–º–∞ –≤ –¥–µ–ø–æ–∑–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ */
        const amountDeposit = 0
        /* –°—É–º–º–∞ –≤ –¥–µ–ø–æ–∑–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ */

        /* –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ª–≥ */
        let duty = 0
        /* –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ª–≥ */

        /* –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ–ø–ª–∞—Ç—ã  */
        const date = wizardDate.startLearning;
        const newd = new Date(date.split(".").reverse().join("."));
        const dd = newd.getDate();
        const mm = newd.getMonth()+1;
        const yy = newd.getFullYear();
        const parsedate = yy+"."+mm+"."+dd;

        const startLearningDate = new Date(parsedate)
        const D = new Date(startLearningDate);
        D.setMonth(D.getMonth() + dueDate);

        const paymentValidity = moment(D).utc().format('DD.MM.YYYY')
        /* –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ–ø–ª–∞—Ç—ã */

        const gsapi = text.gsapi
        const optUpdate = {
            spreadsheetId: "1ibaUK-Ebm12RhisI9Ohz-t5BAx8BT7dX1U_TJDTBQB4",
            range: "Data!A:X",
            valueInputOption: "USER_ENTERED",
            resource: {
                values: [
                    [
                        `${wizardDate.firstname + " " + wizardDate.lastname}`,
                        `${wizardDate.namestud}`, `${wizardDate.classstud}`,
                        `${wizardDate.parentName}`, `${wizardDate.paymentAmount}`, `${paid}`,
                        `0`, ``, `0`,``, `0`, ``, `0`, ``,
                        `–ï–∂–µ–º–µ—Å—è—á–Ω–∏–∫`,
                        `${duty}`, `${dueDate}`, `${averageCheck}`, `${wizardDate.startLearning}`,
                        `${paymentValidity}`, `${averageCheck}`, `${amountDeposit}`, `${wizardDate.paymentReceived}`,
                        `${wizardDate.address}`, `${createDate}`
                    ]
                ]
            }
        };

        gsapi.spreadsheets.values.append(optUpdate)

        let money = wizardDate.paymentAmount

        if(ctx.chat.id === 400336335 || ctx.chat.id === 256177977 || ctx.chat.id === 275028553) {
            await ctx.replyWithHTML(`\n–§–ò–û —à–∫–æ–ª—å–Ω–∏–∫–∞: <b>${wizardDate.namestud}</b>\n–ö–ª–∞—Å—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>${wizardDate.classstud}</b>\n–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <b>${wizardDate.parentName}</b>\n–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: <b>${wizardDate.paymentAmount}</b>\n–ö—É–¥–∞ –ø–æ—Å—Ç—É–ø–∏–ª–∞ –æ–ø–ª–∞—Ç–∞: <b>${wizardDate.paymentReceived}</b>`, keyboardMenu)
        } else {
            await ctx.replyWithHTML(`\n–§–ò–û —à–∫–æ–ª—å–Ω–∏–∫–∞: <b>${wizardDate.namestud}</b>\n–ö–ª–∞—Å—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>${wizardDate.classstud}</b>\n–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <b>${wizardDate.parentName}</b>\n–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: <b>${wizardDate.paymentAmount}</b>\n–ö—É–¥–∞ –ø–æ—Å—Ç—É–ø–∏–ª–∞ –æ–ø–ª–∞—Ç–∞: <b>${wizardDate.paymentReceived}</b>`, keyboardMenuForUser)
        }

        const bot = text.bot
        let id = -1001587919699;
        let message = `–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: <b>${ctx.wizard.state.data.firstname} ${ctx.wizard.state.data.last_name ? ctx.wizard.state.data.last_name: ''}</b>\n–§–ò–û —à–∫–æ–ª—å–Ω–∏–∫–∞: <b>${wizardDate.namestud}</b>\n–ö–ª–∞—Å—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>${wizardDate.classstud}</b>\n–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <b>${wizardDate.parentName}</b>\n–°—É–º–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞: <b>${wizardDate.paymentAmount}</b>\n–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: <b>${money}</b> <i>${wizardDate.paymentAmountText}</i>\n–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: <b>${dueDate} (–º–µ—Å—è—Ü–µ–≤)</b>\n–ö—É–¥–∞ –ø–æ—Å—Ç—É–ø–∏–ª–∞ –æ–ø–ª–∞—Ç–∞: <b>${wizardDate.paymentReceived}</b>\n–ê–¥—Ä–µ—Å: <b>${wizardDate.address}</b>\n`;
        let parse_mode = 'HTML';
        bot.telegram.sendMessage(id, message, { parse_mode })
        bot.telegram.sendSticker(ctx.chat.id, "CAACAgIAAxkBAAI2IGFhqBcmOyOwvGC5r7beIu_ZRr6mAAICAAOvxlEat-gMjnASweEhBA" )
        return ctx.scene.leave()
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})

//–§–ò–û —É—á–µ–Ω–∏–∫–∞
const studentNameRepeat = new Composer()
studentNameRepeat.on("text", async (ctx) => {
    try {
        if(ctx.message.text === '–û—Ç–º–µ–Ω–∞ üö´') {
            await ctx.replyWithHTML("–ø–æ–∫–∞")
            return ctx.scene.leave()
        } else {
            studName = ctx.message.text
            const nameStud = studName

            const gsapi = text.gsapi
            const optUpdate = text.optUpdate

            const findNameStud = (await gsapi.spreadsheets.values.get(optUpdate)).data.values;
            const ress = findNameStud.flat()
            const lowercasednameStud = nameStud.toLowerCase()
            const lowercased = ress.map(ctx => ctx.toLowerCase())

            /* –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–Ω–µ—Å–µ–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞ */
            let indices = [];
            let idx = lowercased.indexOf(lowercasednameStud);
            while (idx !== -1) {
                indices.push(idx);
                idx = lowercased.indexOf(lowercasednameStud, idx + 1);
            }
            indexNameStud = indices[indices.length - 1]
            /* –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–Ω–µ—Å–µ–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞ */

            let findStudName = false
            if (indexNameStud !== undefined) {
                findStudName = true
            }

            if (findStudName === true) {
                await ctx.replyWithHTML("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
                return ctx.wizard.next()
            } else {
                await ctx.replyWithHTML("–û–±—Ä–∞—Ç–Ω–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Ñ–∞–º–∏–ª–∏—è –∏–º—è —É—á–µ–Ω–∏–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –í–∞—Å –≤ —á–∞—Ç '–ü—Ä–æ–¥–∞–∂–∏'\n–î–∞–ª–µ–µ –Ω–∞–π–¥–∏—Ç–µ —Ç–∞–º –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ '–§–ò–û —à–∫–æ–ª—å–Ω–∏–∫–∞' –∏ –ø–æ—Å–ª–µ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ\n /start")
                return ctx.scene.leave()
            }
        }
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})

let findDuty = 0
let findPrepay = 0
const oldStudentStep = new Composer()
oldStudentStep.on("text", async (ctx) => {
    try {
        if(ctx.message.text === '–û—Ç–º–µ–Ω–∞ üö´') {
            await ctx.replyWithHTML("–ø–æ–∫–∞")
            return ctx.scene.leave()
        } else {
            ctx.wizard.state.data.prepayment = ctx.message.text

            wizardDate = ctx.wizard.state.data
            let duty = 0

            const gsapi = text.gsapi
            const optUpdateRow = text.optUpdateRow
            const findRow = (await gsapi.spreadsheets.values.get(optUpdateRow)).data.values[indexNameStud];

            findDuty = findRow[15]
            findPrepay = findRow[5]

            let dueDate = 1

            const date = findRow[19];
            const newd = new Date(date.split(".").reverse().join("."));
            const dd = newd.getDate();
            const mm = newd.getMonth()+1;
            const yy = newd.getFullYear();
            const parsedate = yy+"."+mm+"."+dd;

            const startLearningDate = new Date(parsedate)
            const D = new Date(startLearningDate);
            D.setMonth(D.getMonth() + dueDate);

            const paymentValidity = moment(D).utc().format('DD.MM.YYYY')

            let rangestr = "Data!A:Z"
            const optUpdate = {
                spreadsheetId: "1ibaUK-Ebm12RhisI9Ohz-t5BAx8BT7dX1U_TJDTBQB4",
                range: rangestr,
                valueInputOption: "USER_ENTERED",
                resource: {
                    values: [
                        [
                            `${wizardDate.firstname + " " + wizardDate.lastname}`,
                            `${studName}`, `${findRow[2]}`, `${findRow[3]}`, `${findRow[4]}`, `${findPrepay}`,
                            `0`, ``, `0`, ``, `0`, ``, `0`, ``,
                            `–ï–∂–µ–º–µ—Å—è—á–Ω–∏–∫`, `${duty}`, `${findRow[16]}`, `${findRow[17]}`, `${findRow[18]}`,
                            `${paymentValidity}`, `${findRow[17]}`, `${findRow[21]}`, `${findRow[22]}`,
                            `${findRow[23]}`, `${findRow[24]}`, `${createDate}`
                        ]
                    ]
                }
            }

            gsapi.spreadsheets.values.append(optUpdate)

            await ctx.replyWithHTML(`–§–ò–û —à–∫–æ–ª—å–Ω–∏–∫–∞: <b>${studName}</b>\n–ö–ª–∞—Å—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>${findRow[2]}</b>\n–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <b>${findRow[3]}</b>\n–°—É–º–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞: <b>${findRow[4]}</b>\n–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: <b>${wizardDate.prepayment}</b> <i>${wizardDate.paymentAmountText}</i>\n–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: <b>${findRow[16]} (–º–µ—Å—è—Ü–µ–≤)</b>\n–ö—É–¥–∞ –ø–æ—Å—Ç—É–ø–∏–ª–∞ –æ–ø–ª–∞—Ç–∞: <b>${findRow[22]}</b>\n–ê–¥—Ä–µ—Å: <b>${findRow[23]}</b>\n`)
            const bot = text.bot
            let id = -1001587919699
            let message = `–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: <b>${ctx.wizard.state.data.firstname} ${ctx.wizard.state.data.last_name ? ctx.wizard.state.data.last_name: ''}</b>\n–§–ò–û —à–∫–æ–ª—å–Ω–∏–∫–∞: <b>${studName}</b>\n–ö–ª–∞—Å—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>${findRow[2]}</b>\n–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <b>${findRow[3]}</b>\n–°—É–º–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞: <b>${findRow[4]}</b>\n–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: <b>${wizardDate.prepayment}</b> <i>–µ–∂–µ–º–µ—Å—è—á–Ω–∏–∫</i>\n–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: <b>${findRow[16]} (–º–µ—Å—è—Ü–µ–≤)</b>\n–ö—É–¥–∞ –ø–æ—Å—Ç—É–ø–∏–ª–∞ –æ–ø–ª–∞—Ç–∞: <b>${findRow[22]}</b>\n–ê–¥—Ä–µ—Å: <b>${findRow[23]}</b>\n`
            let parse_mode = 'HTML'
            bot.telegram.sendMessage(id, message, {parse_mode});
            bot.telegram.sendSticker(ctx.chat.id, "CAACAgIAAxkBAAI2IGFhqBcmOyOwvGC5r7beIu_ZRr6mAAICAAOvxlEat-gMjnASweEhBA")
            return ctx.scene.leave()
        }
    } catch (e) {
        await ctx.reply("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        console.error(e)
        return ctx.scene.leave()
    }
})

const addMonthlyScene = new WizardScene('addMonthlyWizard', startStep, newOrOldStudentText, studentName, studentClass, parentName, paymentAmount, paymentReceived, startLearning, conditionStep, studentNameRepeat, oldStudentStep)
module.exports = addMonthlyScene